// Code generated by MockGen. DO NOT EDIT.
// Source: unit-tests/others (interfaces: OtherStorage)

// Package mockothers is a generated GoMock package.
package mockothers

import (
	http "net/http"
	reflect "reflect"
	prettylogs "unit-tests/prettylogs"

	gomock "github.com/golang/mock/gomock"
	mux "github.com/gorilla/mux"
	ldclient "gopkg.in/launchdarkly/go-server-sdk.v5"
)

// MockOtherStorage is a mock of OtherStorage interface.
type MockOtherStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOtherStorageMockRecorder
}

// MockOtherStorageMockRecorder is the mock recorder for MockOtherStorage.
type MockOtherStorageMockRecorder struct {
	mock *MockOtherStorage
}

// NewMockOtherStorage creates a new mock instance.
func NewMockOtherStorage(ctrl *gomock.Controller) *MockOtherStorage {
	mock := &MockOtherStorage{ctrl: ctrl}
	mock.recorder = &MockOtherStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtherStorage) EXPECT() *MockOtherStorageMockRecorder {
	return m.recorder
}

// AnonymousBool mocks base method.
func (m *MockOtherStorage) AnonymousBool(arg0 *ldclient.LDClient, arg1 string, arg2 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnonymousBool", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AnonymousBool indicates an expected call of AnonymousBool.
func (mr *MockOtherStorageMockRecorder) AnonymousBool(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnonymousBool", reflect.TypeOf((*MockOtherStorage)(nil).AnonymousBool), arg0, arg1, arg2)
}

// CloseConnections mocks base method.
func (m *MockOtherStorage) CloseConnections(arg0 *ldclient.LDClient) mux.MiddlewareFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnections", arg0)
	ret0, _ := ret[0].(mux.MiddlewareFunc)
	return ret0
}

// CloseConnections indicates an expected call of CloseConnections.
func (mr *MockOtherStorageMockRecorder) CloseConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnections", reflect.TypeOf((*MockOtherStorage)(nil).CloseConnections), arg0)
}

// Evaluate mocks base method.
func (m *MockOtherStorage) Evaluate(arg0 *ldclient.LDClient, arg1 string, arg2 bool, arg3 map[string]interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evaluate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Evaluate indicates an expected call of Evaluate.
func (mr *MockOtherStorageMockRecorder) Evaluate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockOtherStorage)(nil).Evaluate), arg0, arg1, arg2, arg3)
}

// InitializeSentry mocks base method.
func (m *MockOtherStorage) InitializeSentry(arg0 string, arg1 *prettylogs.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSentry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeSentry indicates an expected call of InitializeSentry.
func (mr *MockOtherStorageMockRecorder) InitializeSentry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSentry", reflect.TypeOf((*MockOtherStorage)(nil).InitializeSentry), arg0, arg1)
}

// RecoveryMiddleware mocks base method.
func (m *MockOtherStorage) RecoveryMiddleware(arg0 http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoveryMiddleware", arg0)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// RecoveryMiddleware indicates an expected call of RecoveryMiddleware.
func (mr *MockOtherStorageMockRecorder) RecoveryMiddleware(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoveryMiddleware", reflect.TypeOf((*MockOtherStorage)(nil).RecoveryMiddleware), arg0)
}

// SetLaunchDarklyClient mocks base method.
func (m *MockOtherStorage) SetLaunchDarklyClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLaunchDarklyClient")
}

// SetLaunchDarklyClient indicates an expected call of SetLaunchDarklyClient.
func (mr *MockOtherStorageMockRecorder) SetLaunchDarklyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLaunchDarklyClient", reflect.TypeOf((*MockOtherStorage)(nil).SetLaunchDarklyClient))
}
